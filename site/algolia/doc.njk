<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/css/styles.css">
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/highlight/styles/base16/dracula.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.css@7.4.5/themes/satellite-min.css" integrity="sha256-TehzF/2QvNKhGQrrNpoOb2Ck4iGZ1J/DI4pkd2oUsBc=" crossorigin="anonymous">
</head>
<body>

    <div class="layout">
      {% include "layout/header.njk" %}
      {% include "layout/sidebar.njk" %}
      {% include "layout/main.njk" %}
      {% include "layout/search.njk" %}
    </div>

<script>
  const sidebar = document.querySelector('#sidebar');
    const closeBtn = document.querySelector('#close-sidebar');
    const openBtn = document.querySelector('#open-sidebar');
    const header = document.querySelector('#header');
    const onPage = document.querySelector('#on-page');
    const searchBtn = document.querySelector('#search-btn');
    const searchModal = document.querySelector('#search-modal');
    const searchModalContainer = document.querySelector('#search-container');
    const searchContent = document.querySelector('#search-content');

    closeBtn.addEventListener('click', () => {
        sidebar.classList.add('hidden');
        header.classList.remove('bottom');
    });

    openBtn.addEventListener('click', () => {
        header.classList.add('bottom');
        sidebar.classList.remove('hidden');
    });
    //scroll listener
    window.addEventListener('scroll', () => {
        if (window.scrollY > 0 && window.innerWidth > 1428) {
            onPage.classList.remove('hidden');
        } else {
            onPage.classList.add('hidden');
        }
    });

    //search
    searchBtn.addEventListener('click', () => {
      searchModal.classList.add('show-modal');
    });

   searchModal.addEventListener('click', (e) => {
      if(window.innerWidth > 991) {
        if (searchModalContainer === e.target || searchModalContainer.contains(e.target)) return;
          searchModal.classList.remove('show-modal');
      }
    });

  searchContent.addEventListener('click', (e) => {
    if(window.innerWidth < 992) {
      searchModal.classList.remove('show-modal');
      e.stopImmediatePropagation()
    }
  });

</script>

<script src="/highlight/highlight.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    hljs.highlightAll()
  });
</script>


<script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.14.2/dist/algoliasearch-lite.umd.js" integrity="sha256-dImjLPUsG/6p3+i7gVKBiDM8EemJAhQ0VvkRK2pVsQY=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.49.1/dist/instantsearch.production.min.js" integrity="sha256-3s8yn/IU/hV+UjoqczP+9xDS1VXIpMf3QYRUi9XoG0Y=" crossorigin="anonymous"></script>

<script>
  const searchClient = algoliasearch('H1FAIV3INQ', 'API-KEY');

  const search = instantsearch({
    indexName: 'demo',
    searchClient,
    searchFunction(helper) {
      const modalContent = document.querySelector('#search-content');
      const isMobile = window.innerWidth < 992;
      if(isMobile) {
        modalContent.style.opacity = helper.state.query === '' ? '0' : '1';
        modalContent.style.backgroundColor = helper.state.query === '' ? 'transparent' : '#fff';
      } else {
        modalContent.style.display = helper.state.query === '' ? 'none' : '';
        modalContent.style.backgroundColor = helper.state.query === '' ? 'transparent' : '#fff';
      }

      helper.search();
    }
  });

  search.addWidgets([
    instantsearch.widgets.searchBox({
      container: '#searchbox',
      placeholder: 'Search for concepts',
      autofocus: true,
      showSubmit: false,
      showReset: true,
    }),

    instantsearch.widgets.hits({
      container: '#hits',
      templates: {
        // empty: `<div>No results have been found for {{query}}</div>.`,
        item(hit) {
          return `
          <article class="search-result">
              <a href="${hit.url}">
                <h2>${instantsearch.highlight({ attribute: 'title', highlightedTagName: 'span', hit })}</h2>
                <p>${instantsearch.highlight({ attribute: 'description', highlightedTagName: 'span', hit })}</p>
              </a>
          </article>
        `;
        }
      }
    }),
  ]);



  search.start();
</script>

</body>
</html>
